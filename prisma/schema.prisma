// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  role          UserRole @default(USER)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
 }

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id                 String @id @default(cuid())
  email              String
  token              String @unique
  expires            DateTime

  @@unique([email, token])
}

model PasswordResetTokeen {
  id                 String @id @default(cuid())
  email              String
  token              String @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id                 String @id @default(cuid())
  email              String
  token              String @unique
  expires            DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id                 String @id @default(cuid())
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([userId])
}